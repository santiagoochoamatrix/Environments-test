name: Pipeline

on:
# despliegue por eventos
  push:
    branches:
      - develop
      - release
      - staging
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - develop
      - release
      - staging
      - main
# despliegue a demanda
  workflow_dispatch:

env:
    dev_env: "dev"
    prod_env: "Production"
      
    
jobs:
    GitFlow-Check:
      name: GitFlow check 
      if: ${{ github.event_name == 'pull_request' }}
      runs-on: ubuntu-latest
      steps:
        - name: Deploy
          run: echo gitflow_check
            
    Snyk-IaC:
      name: Snyk  IaC
      if: ${{ github.event_name == 'pull_request' }}
      needs: [GitFlow-Check]
      runs-on: ubuntu-latest
      steps:
        - name: Deploy
          run: echo Snyk - IaC
                  
    Snyk-Code:
      name: Snyk  Code
      needs: [GitFlow-Check]
      if: ${{ github.event_name == 'pull_request' }}
      runs-on: ubuntu-latest
      steps:
        - name: Deploy
          run: echo Snyk - Code

    Test-unit-pr:
      name: Test-sonar
      needs: [Snyk-Code, Snyk-IaC]
      if: ${{ github.event_name == 'pull_request' }}
      runs-on: ubuntu-latest
      steps:
         - name: Test unit
           run: echo Test unit
         - name: Sonar Scan Code
           run: echo Scan Code
      
    Snyk-Open-Source:
     name: Snyk - Open Source
     needs: [Test-unit-pr]
     if: ${{ github.event_name == 'pull_request' }}
     runs-on: ubuntu-latest
     steps:
       - name: Deploy
         run:  echo Snyk - Open Source

    
    Test-unit:
       name: Test-sonar
       if: |
        (github.event_name == 'workflow_dispatch' && (startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/releases/') || startsWith(github.ref, 'refs/heads/hotfix/'))) ||
        github.event_name == 'push'
       runs-on: ubuntu-latest
       steps:
          - name: Test unit
            run: echo Test unit
          - name: Sonar Scan Code
            run: echo Scan Code

    Build:
     name: Build
     needs: [Test-unit]
     if: |
      (github.event_name == 'workflow_dispatch' && (startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/releases/') || startsWith(github.ref, 'refs/heads/hotfix/'))) ||
      github.event_name == 'push'
     runs-on: ubuntu-latest
     steps:
        - name: deploy_role
          run: echo deploy_role
        - name: build_microservice
          run: echo build_microservice
        - name: deploy_registry
          run: echo deploy_registry
        - name: deploy_image
          run: echo deploy_image

    deploy:
     name: deploy
     needs: [Build]
     if: |
      (github.event_name == 'workflow_dispatch' && (startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/releases/') || startsWith(github.ref, 'refs/heads/hotfix/'))) ||
      github.event_name == 'push'
     runs-on: ubuntu-latest
     steps:
        - name: config_microservice
          run: echo config_microservice
        - name: make deploy_codebuild
          run: echo make deploy_codebuild
        - name: terraform_init
          run: echo terraform_init
        - name: terraform_apply
          run:  echo terraform_apply

    deploy_prod:
      name: deploy_prod
      needs: [Build]
      environment: 
        name: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || github.ref == 'refs/heads/develop' && 'development' }}
      if: |
       (github.event_name == 'workflow_dispatch' && (startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/releases/') || startsWith(github.ref, 'refs/heads/hotfix/'))) ||
       (github.event_name == 'push' && github.ref == 'refs/heads/main')
      runs-on: ubuntu-latest
      steps:
         - name: config_microservice
           run: echo config_microservice
         - name: make deploy_codebuild
           run: echo make deploy_codebuild
         - name: terraform_init
           run: echo terraform_init
         - name: terraform_apply
           run:  echo terraform_apply